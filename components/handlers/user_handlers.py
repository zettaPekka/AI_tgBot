from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from database.crud import add_user_if_not_exists, reset_context
import components.keyboards.user_kb as kb
from components.states.user_states import Chat, Image
from api.ai_api.generate_text import answer_to_text_prompt, answer_to_view_prompt
from api.ai_api.generate_image import image_generator
from api.ai_api.text_formatting import style_changer
from components.payment_system.payment_operations import check_premium


router = Router()


@router.message(CommandStart())
async def start(message: Message):
    await message.answer('<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —É–º–Ω—ã–π –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!\n\n–ß—Ç–æ —è —É–º–µ—é?\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã: —Å—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã, —Å—Ç–∏—Ö–∏ –∏ –¥–∞–∂–µ –∫–æ–¥\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?)\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∏–¥–µ—è–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏\n\n–ö–æ–º–∞–Ω–¥—ã:\n<i>/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/generate - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n/image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n/stop - –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞\n/premium - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</i>\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–∫–∞–∂—É, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ </b>üöÄ',
                            reply_markup=kb.start_kb)
    await add_user_if_not_exists(tg_id=message.from_user.id)

@router.callback_query(F.data == 'start_dialog')
async def start_dialog(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active':
        await callback.answer('–î–∏–∞–ª–æ–≥ —É–∂–µ –Ω–∞—á–∞—Ç</b>')
        await callback.message.answer('<b>–î–∏–∞–ª–æ–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>')
    else:
        await callback.message.answer('<b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop</b>')
        await callback.answer('–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç')
        await state.set_state(Chat.active)

@router.message(Command('stop'))
async def stop(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active':
        await state.clear()
        await message.answer('<b>–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π /image</b>')
        await reset_context(tg_id=message.from_user.id)
    elif current_state == 'Chat:waiting':
        await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥</b>')
    else:
        await message.answer('<b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate</b>')

@router.message(Command('reset'))
async def reset(message: Message):
    await reset_context(tg_id=message.from_user.id)
    await message.answer('<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω</b>')

@router.message(Command('generate'))
async def generate_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'Chat:active' or current_state == 'Chat:waiting':
        await message.answer('<b>–î–∏–∞–ª–æ–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>')
    else:
        await message.answer('<b>–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop</b>')
        await state.set_state(Chat.active)

@router.message(Command('info'))
async def info(message: Message):
    await message.answer('üö´ <b><i>–ü—Ä–∞–≤–∏–ª–∞:</i></b>\n‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–µ–Ω–∞–≤–∏—Å—Ç—å—é, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–µ–π (—Ä–∞—Å–∞, –ø–æ–ª, —Ä–µ–ª–∏–≥–∏—è –∏ –¥—Ä.), –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø/–ª–∏—á–Ω–æ—Å—Ç–µ–π.\n‚Ä¢ –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—É–ª–ª–∏–Ω–≥–∞, —É–≥—Ä–æ–∑, –∫—Å–µ–Ω–æ—Ñ–æ–±–∏–∏, —Ä–∞—Å–∏–∑–º–∞ –∏–ª–∏ —É–Ω–∏–∂–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã.\n\n<b>–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö ‚Äî —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ! üôå</b>')

@router.callback_query(F.data == 'create_image')
async def create_image(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    currentt_state = await state.get_state()
    if currentt_state == 'Chat:active' or currentt_state == 'Chat:waiting':
        await callback.message.answer('<b>–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ /stop</b>')
        return
    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è <i>(–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)</i></b>',
                                    reply_markup=kb.back_kb)
    await state.set_state(Image.prompt)

@router.message(Command('image'))
async def create_image(message: Message, state: FSMContext):
    currentt_state = await state.get_state()
    if currentt_state == 'Chat:active' or currentt_state == 'Chat:waiting':
        await message.answer('<b>–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ /stop</b>')
        return
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è <i>(–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)</i></b>',
                                    reply_markup=kb.back_kb)
    await state.set_state(Image.prompt)

@router.message(Chat.active)
async def chat_active(message: Message, state: FSMContext): 
    current_state = await state.get_state()
    if current_state == 'Chat:waiting':
        await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞</b>')
    else:
        if message.content_type == ContentType.TEXT:
            waiting_message = await message.answer('<b><i>‚è≥ –û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</i></b>')
            await state.set_state(Chat.waiting)
            ai_response = await answer_to_text_prompt(main_prompt=message.text, tg_id=message.from_user.id)
            ai_response = await style_changer(latex_code=ai_response)
            try:
                await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
            except TelegramBadRequest:
                await message.answer(ai_response[:4050], parse_mode=None)
            await state.set_state(Chat.active)
            await waiting_message.delete()
        elif message.content_type == ContentType.PHOTO:
            access = check_premium(tg_id=message.from_user.id)
            if not access:
                await message.answer('<b>–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É /premium</b>')
                return
            waiting_message = await message.answer('<b><i>‚è≥ –û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</i></b>')
            await state.set_state(Chat.waiting)
            ai_response = await answer_to_view_prompt(message=message)
            ai_response = await style_changer(latex_code=ai_response)
            try:
                await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
            except TelegramBadRequest:
                await message.answer(ai_response[:4050], parse_mode=None)
            await state.set_state(Chat.active)
            await waiting_message.delete()
        else: 
            await message.answer('<b>–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–æ—Å–ø—Ä–∏–Ω–∏–º–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>')

@router.message(Chat.waiting)
async def waiting(message: Message):
    await message.answer('<b>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞</b>')

@router.message(Image.prompt)
async def create_image(message: Message, state: FSMContext):
    waiting_message = await message.answer('<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>')
    image_url = await image_generator(prompt=message.text)
    try:
        await message.answer_photo(image_url, caption='<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n/image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ\n/generate - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</b>')
    except:
        try:
            new_image_url = await image_generator(prompt=message.text)
            await message.answer_photo(new_image_url, caption='<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n/image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ\n/generate - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</b>')
        except:
            await message.answer('<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /image</b>')
    await waiting_message.delete()
    await state.clear()

@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —É–º–Ω—ã–π –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é!\n\n–ß—Ç–æ —è —É–º–µ—é?\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã: —Å—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã, —Å—Ç–∏—Ö–∏ –∏ –¥–∞–∂–µ –∫–æ–¥\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?)\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∏–¥–µ—è–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏\n\n–ö–æ–º–∞–Ω–¥—ã:\n<i>/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/generate - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n/image - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n/stop - –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞\n/premium - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</i>\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ–∫–∞–∂—É, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ </b>üöÄ',
                            reply_markup=kb.start_kb)
    await state.clear() 

@router.message()
async def other(message: Message):
    await message.answer('<b>–£–ø—Å, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate</b>')